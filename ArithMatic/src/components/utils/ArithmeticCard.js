/**
 * ArithmeticCard is a class that holds the information for a single question
 * it will be used in the GameScreen to display a question and handle the player's answer
 * it will be stored in the context to be used in the GameScreen, as well as to be stored in Async storage
 * every one ever generated will be stored in Async storage, unless the player decides to clear it
 * the card will be able to be reused, so more than one card can be in the context at a time or even storage 
 */

import React, { useContext } from 'react';
import { GameContext } from '../context/GameContext';

class ArithmeticCard {
  constructor() {
    // Access game settings from the context
    const { gameSettings } = useContext(GameContext);
    
    // Fields for each card
    this.question = '';
    this.possibleAnswers = [];
    this.correctAnswer = null;
    this.answeredCorrectly = false;
    this.startTimeValue = null;  // Start time when the question is displayed
    this.endTimeValue = null;    // End time when the answer is submitted
    this.timeTaken = null;       // The time taken to answer the question

    // Generate the contents based on game settings
    this.generateQuestion(gameSettings);
  }
  /**
   * generateQuestion is a function that generates a question based on the game settings
   * it will be used in the constructor to generate the question when the card is created
   * it will be used in the GameScreen to generate all questions for a game, then stored    
   * @param {*} gameSettings 
   * significantFigures, parentheses, decimal, selectTypes
   * significantFigures is the number of significant figures to use in the question
   * parentheses is whether to use parentheses in the question
   * decimal is whether to use decimals in the question
   * selectTypes is an array of the types of questions to use in the game
   *   ---select types will be used for randomizing the question type
   */
  generateQuestion(gameSettings) {
    //destructure the game settings(grab the settings)
    const { selectTypes, significantFigures, decimal } = gameSettings;

    // Select a random question type from the selected types, returns a string
    const questionType = selectTypes[Math.floor(Math.random() * selectTypes.length)];

    /**  Create the question based on the selected type (example: addition)
    * switch statement to call the correct function for the question type, able to use strings in js
    * each case will call a different function to create the question, each function will set the question, correct answer, and possible answers
    * the possible answers will be an array of numbers, with one being the correct answer, and the rest being incorrect answers
    * the incorrect answers will be generated by adding or subtracting a random number from the correct answer
    * 
    * this type of design pattern is called a strategy pattern, 
    * and is a way to allow for the creation of a question to be determined at runtime
    */
    switch (questionType) {
      case 'addition':
        this.createAdditionQuestion(significantFigures, decimal);
        break;
      case 'subtraction':
        this.createSubtractionQuestion(significantFigures, decimal);
        break;
      case 'multiplication':
        this.createMultiplicationQuestion(significantFigures, decimal);
        break;
      case 'division':
        this.createDivisionQuestion(significantFigures, decimal);
        break;
      case 'exponents':
        this.createExponentsQuestion(significantFigures, decimal);
        break;
      case 'roots':
        this.createRootsQuestion(significantFigures, decimal);
        break;
      case 'logarithms':
        this.createLogarithmsQuestion(significantFigures, decimal);
        break;
      case 'modulus':
        this.createModulusQuestion(significantFigures, decimal);
        break;
      default:
        break;
    }
  }

  /**
   * createAdditionQuestion is a function that creates an addition question
   * it will be used in the generateQuestion function to create an addition question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} parentheses passed to generateRandomNumber to set the number of parentheses
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * 
   */
  createAdditionQuestion(significantFigures, decimal) {
    const num1 = this.generateRandomNumber(significantFigures, decimal);
    const num2 = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `${num1} + ${num2}`;
    this.correctAnswer = num1 + num2;

    // Populate possible answers (simple example)
    this.possibleAnswers = this.generatePossibleAnswers(this.correctAnswer);
  }

  /**
   * createSubtractionQuestion is a function that creates a subtraction question
   * it will be used in the generateQuestion function to create a subtraction question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * @returns 
   */
  createSubtractionQuestion(significantFigures, decimal) {
    const num1 = this.generateRandomNumber(significantFigures, decimal);
    const num2 = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `${num1} - ${num2}`;
    this.correctAnswer = num1 - num2;

    // Populate possible answers (simple example)
    this.possibleAnswers = this.generatePossibleAnswers(this.correctAnswer);
  }

  /**
   * createMultiplicationQuestion is a function that creates a multiplication question
   * it will be used in the generateQuestion function to create a multiplication question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * @returns 
   */
  createMultiplicationQuestion(significantFigures, decimal) {
    const num1 = this.generateRandomNumber(significantFigures, decimal);
    const num2 = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `${num1} * ${num2}`;
    this.correctAnswer = num1 * num2;
  }


  /**
   * createDivisionQuestion is a function that creates a division question
   * it will be used in the generateQuestion function to create a division question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * @returns 
   */
  createDivisionQuestion(significantFigures, decimal) {
    const num1 = this.generateRandomNumber(significantFigures, decimal);
    const num2 = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `${num1} / ${num2}`;
    this.correctAnswer = num1 / num2;
  }

  /**
   * createExponentsQuestion is a function that creates an exponents question
   * it will be used in the generateQuestion function to create an exponents question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * @returns 
   */
  createExponentsQuestion(significantFigures, decimal) {
    const base = this.generateRandomNumber(significantFigures, decimal);
    const exponent = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `${base} ^ ${exponent}`;
    this.correctAnswer = Math.pow(base, exponent);    
  }

  /**
   * createRootsQuestion is a function that creates a roots question
   * it will be used in the generateQuestion function to create a roots question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * @returns 
   */
  createRootsQuestion(significantFigures, decimal) {
    const radicand = this.generateRandomNumber(significantFigures, decimal);
    const index = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `âˆš(${radicand})`;
    this.correctAnswer = Math.pow(radicand, 1 / index); // Calculate the root
  }

  /**
   * createLogarithmsQuestion is a function that creates a logarithms question
   * it will be used in the generateQuestion function to create a logarithms question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * @returns 
   */
  createLogarithmsQuestion(significantFigures, decimal) {
    const base = this.generateRandomNumber(significantFigures, decimal);
    const argument = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `log(${argument})`;
    this.correctAnswer = Math.log(argument) / Math.log(base); // Calculate the logarithm  
  }

  /**
   * createModulusQuestion is a function that creates a modulus question
   * it will be used in the generateQuestion function to create a modulus question
   * it will be used in the GameScreen to when a question is needed for a game, then stored    
   * @param {*} significantFigures passed to generateRandomNumber to set the number of significant figures
   * @param {*} decimal passed to generateRandomNumber to set the number of decimals
   * @returns 
   */
  createModulusQuestion(significantFigures, decimal) {
    const number = this.generateRandomNumber(significantFigures, decimal);
    const modulus = this.generateRandomNumber(significantFigures, decimal);

    // Create the question string with optional parentheses
    const question = `|${number}| mod ${modulus}`;
    this.correctAnswer = number % modulus; // Calculate the modulus
  }


  

  generateRandomNumber(significantFigures, decimal) {
    // Logic to generate a number with given significant figures and decimal settings
    let factor = Math.pow(10, significantFigures);
    let number = Math.round(Math.random() * factor);

    if (decimal) {
      return (number / factor).toFixed(significantFigures);
    } else {
      return number;
    }
  }

  generatePossibleAnswers(correctAnswer) {
    // Generate 3 wrong answers + the correct answer (randomized)
    let possibleAnswers = [correctAnswer];

    while (possibleAnswers.length < 4) {
      let wrongAnswer = correctAnswer + Math.floor(Math.random() * 10) - 5; // Random wrong answer
      if (!possibleAnswers.includes(wrongAnswer)) {
        possibleAnswers.push(wrongAnswer);
      }
    }

    // Randomize the array
    return possibleAnswers.sort(() => Math.random() - 0.5);
  }

  // Start time tracking when the card is loaded
  startTime() {
    this.startTimeValue = Date.now();  // Record the start time
  }

  // End time tracking when the player submits their answer
  endTime() {
    this.endTimeValue = Date.now();  // Record the end time
    this.calculateTimeTaken();
  }

  // Calculate the time taken based on start and end time
  calculateTimeTaken() {
    if (this.startTimeValue && this.endTimeValue) {
      this.timeTaken = (this.endTimeValue - this.startTimeValue) / 1000; // Convert to seconds
    }
  }
}

export default ArithmeticCard;
